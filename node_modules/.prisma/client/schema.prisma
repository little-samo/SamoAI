model AgentModel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String
  meta Json   @default("{}")

  llmApis LlmApiModel[] @relation("agentLlmApis")
}

model LlmApiModel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  platform LLMPlatform
  model    String      @db.VarChar(256)

  agents AgentModel[] @relation("agentLlmApis")
}

model LlmApiKeyModel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userModel   UserModel? @relation("userLlmApiKey", fields: [userModelId], references: [id])
  userModelId Int?       @map("user_model_id")

  platform LLMPlatform
  key      String

  @@unique([userModelId, platform])
}

enum LLMPlatform {
  ANTHROPIC
  GPT
}

model LocationModel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  meta Json   @default("{}")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model UserApiKeyModel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userModel   UserModel? @relation("userApiKey", fields: [userModelId], references: [id])
  userModelId Int?       @unique @map("user_model_id")

  key String
}

model UserApiHistoryModel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userModel   UserModel? @relation("userApiHistory", fields: [userModelId], references: [id])
  userModelId Int?       @map("user_model_id")

  request  Json
  response Json

  @@index([userModelId, createdAt])
}

model UserModel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  platform UserPlatform
  pid      BigInt       @unique

  username  String?
  nickname  String
  firstName String? @map("first_name")
  lastName  String? @map("last_name")

  meta Json @default("{}")

  apiKey       UserApiKeyModel?      @relation("userApiKey")
  apiHistories UserApiHistoryModel[] @relation("userApiHistory")

  llmApiKeys LlmApiKeyModel[] @relation("userLlmApiKey")
}

enum UserPlatform {
  API
  TELEGRAM
}
