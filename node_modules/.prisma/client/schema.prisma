model AgentModel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String
  core String
  meta Json   @default("{}")

  state Json @default("{}")

  llmApis LlmApiModel[] @relation("agentLlmApis")

  ownedLocations LocationModel[] @relation("agentOwnedLocations")

  userMemories AgentUserMemoryModel[] @relation("agentUserMemoryAgent")

  sentMessages     MessageModel[] @relation("agentSentMessages")
  receivedMessages MessageModel[] @relation("agentReceivedMessages")
}

model AgentUserMemoryModel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  agent   AgentModel @relation("agentUserMemoryAgent", fields: [agentId], references: [id])
  agentId Int        @map("agent_id")
  user    UserModel  @relation("agentUserMemoryUser", fields: [userId], references: [id])
  userId  Int        @map("user_id")

  memories String[]

  @@unique([agentId, userId])
}

model LlmApiModel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  platform LLMPlatform
  model    String      @db.VarChar(256)

  agents AgentModel[] @relation("agentLlmApis")
}

model LlmApiKeyModel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userModel   UserModel? @relation("userLlmApiKey", fields: [userModelId], references: [id])
  userModelId Int?       @map("user_model_id")

  platform LLMPlatform
  key      String

  @@unique([userModelId, platform])
}

enum LLMPlatform {
  ANTHROPIC
  GPT
}

model LocationModel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String
  core String
  meta Json   @default("{}")

  state Json @default("{}")

  ownerAgent   AgentModel? @relation("agentOwnedLocations", fields: [ownerAgentId], references: [id])
  ownerAgentId Int?        @map("owner_agent_id")
  ownerUser    UserModel?  @relation("userOwnedLocations", fields: [ownerUserId], references: [id])
  ownerUserId  Int?        @map("owner_user_id")

  messages MessageModel[] @relation("locationMessages")
}

model MessageModel {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  location   LocationModel? @relation("locationMessages", fields: [locationId], references: [id])
  locationId Int?           @map("location_id")

  senderAgent   AgentModel? @relation("agentSentMessages", fields: [senderAgentId], references: [id])
  senderAgentId Int?        @map("sender_agent_id")
  senderUser    UserModel?  @relation("userSentMessages", fields: [senderUserId], references: [id])
  senderUserId  Int?        @map("sender_user_id")

  receiverAgent   AgentModel? @relation("agentReceivedMessages", fields: [receiverAgentId], references: [id])
  receiverAgentId Int?        @map("receiver_agent_id")
  receiverUser    UserModel?  @relation("userReceivedMessages", fields: [receiverUserId], references: [id])
  receiverUserId  Int?        @map("receiver_user_id")

  content Json

  @@index([locationId, createdAt])
  @@index([senderAgentId, createdAt])
  @@index([senderUserId, createdAt])
  @@index([receiverAgentId, createdAt])
  @@index([receiverUserId, createdAt])
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model UserApiKeyModel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userModel   UserModel? @relation("userApiKey", fields: [userModelId], references: [id])
  userModelId Int?       @unique @map("user_model_id")

  key String
}

model UserApiHistoryModel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userModel   UserModel? @relation("userApiHistory", fields: [userModelId], references: [id])
  userModelId Int?       @map("user_model_id")

  request  Json
  response Json

  @@index([userModelId, createdAt])
}

model UserModel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  platform UserPlatform
  pid      BigInt       @unique

  username  String?
  nickname  String
  firstName String? @map("first_name")
  lastName  String? @map("last_name")

  ownedLocations LocationModel[] @relation("userOwnedLocations")

  agentMemories AgentUserMemoryModel[] @relation("agentUserMemoryUser")

  sentMessages     MessageModel[] @relation("userSentMessages")
  receivedMessages MessageModel[] @relation("userReceivedMessages")

  apiKey       UserApiKeyModel?      @relation("userApiKey")
  apiHistories UserApiHistoryModel[] @relation("userApiHistory")

  llmApiKeys LlmApiKeyModel[] @relation("userLlmApiKey")
}

enum UserPlatform {
  API
  TELEGRAM
}
